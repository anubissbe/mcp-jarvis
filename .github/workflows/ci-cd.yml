# MCP Server CI/CD Pipeline
# For: Model Context Protocol (MCP) servers
# Self-hosted runners: 192.168.1.16 with 20 available runners

name: 🔌 MCP Server Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Static Analysis & Security
  code-analysis:
    name: 🔍 Code Analysis & Security
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint Analysis
        run: npm run lint
        continue-on-error: true

      - name: 🎯 TypeScript Check
        run: npm run typecheck

      - name: 🔍 MCP Schema Validation
        run: |
          if [ -f "mcp-schema.json" ]; then
            npm run validate:schema
          else
            echo "No MCP schema found, skipping validation"
          fi

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔒 Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🧪 Unit & Integration Tests
  tests:
    name: 🧪 Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: ['18', '20']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build MCP server
        run: npm run build

      - name: 🧪 Run unit tests
        run: npm run test:unit -- --coverage

      - name: 🔗 Run integration tests
        run: npm run test:integration

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20'
        with:
          file: ./coverage/lcov.info
          flags: mcp-server
          name: mcp-server-coverage

  # 🔌 MCP Protocol Tests
  mcp-protocol-tests:
    name: 🔌 MCP Protocol Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 25
    needs: [tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build MCP server
        run: npm run build

      - name: 🔌 Start MCP server
        run: |
          npm run start &
          MCP_PID=$!
          echo "MCP_PID=$MCP_PID" >> $GITHUB_ENV
          sleep 5

      - name: 📞 Test MCP capabilities
        run: |
          # Test basic MCP protocol methods
          node -e "
            const { MCPClient } = require('@modelcontextprotocol/client');
            const client = new MCPClient();
            
            async function testMCP() {
              try {
                await client.connect('stdio', { command: 'node', args: ['dist/index.js'] });
                
                // Test capabilities
                const capabilities = await client.listCapabilities();
                console.log('✅ Capabilities:', JSON.stringify(capabilities, null, 2));
                
                // Test tools
                const tools = await client.listTools();
                console.log('✅ Tools:', JSON.stringify(tools, null, 2));
                
                // Test prompts (if available)
                try {
                  const prompts = await client.listPrompts();
                  console.log('✅ Prompts:', JSON.stringify(prompts, null, 2));
                } catch (e) {
                  console.log('ℹ️ No prompts available');
                }
                
                // Test resources (if available)
                try {
                  const resources = await client.listResources();
                  console.log('✅ Resources:', JSON.stringify(resources, null, 2));
                } catch (e) {
                  console.log('ℹ️ No resources available');
                }
                
                await client.disconnect();
                console.log('✅ MCP server tests passed');
              } catch (error) {
                console.error('❌ MCP server test failed:', error);
                process.exit(1);
              }
            }
            
            testMCP();
          "

      - name: 🔌 Test with Claude Code CLI
        run: |
          # Test MCP server with @modelcontextprotocol/cli if available
          if command -v npx >/dev/null 2>&1; then
            npx @modelcontextprotocol/cli inspect stdio node dist/index.js
          else
            echo "Claude Code CLI not available, skipping"
          fi

      - name: 🛑 Stop MCP server
        if: always()
        run: |
          if [ ! -z "$MCP_PID" ]; then
            kill $MCP_PID || true
          fi

  # 🎯 End-to-End MCP Tests
  e2e-mcp-tests:
    name: 🎯 E2E MCP Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 30
    needs: [mcp-protocol-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build MCP server
        run: npm run build

      - name: 🎭 Install E2E test dependencies
        run: |
          npm install @playwright/test
          npx playwright install

      - name: 🎯 Run E2E MCP tests
        run: |
          if [ -d "tests/e2e" ]; then
            npm run test:e2e
          else
            echo "No E2E tests found"
          fi

      - name: 📸 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # 📊 Performance Benchmarks
  performance:
    name: 📊 Performance Tests
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 20
    needs: [mcp-protocol-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build MCP server
        run: npm run build

      - name: 📊 Run performance benchmarks
        run: |
          if [ -f "benchmarks/mcp-performance.js" ]; then
            node benchmarks/mcp-performance.js
          else
            echo "No performance benchmarks found"
          fi

      - name: 🔄 Test concurrent connections
        run: |
          node -e "
            const { spawn } = require('child_process');
            const promises = [];
            
            for (let i = 0; i < 10; i++) {
              const promise = new Promise((resolve, reject) => {
                const child = spawn('node', ['dist/index.js']);
                child.on('close', code => {
                  if (code === 0) resolve(i);
                  else reject(new Error(\`Process \${i} failed with code \${code}\`));
                });
                setTimeout(() => child.kill(), 2000);
              });
              promises.push(promise);
            }
            
            Promise.all(promises)
              .then(() => console.log('✅ Concurrent connection test passed'))
              .catch(err => {
                console.error('❌ Concurrent connection test failed:', err);
                process.exit(1);
              });
          "

  # 🐳 Docker Build & Security
  docker-build:
    name: 🐳 Docker Build & Security
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 15
    needs: [code-analysis]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker container
        run: |
          docker run --rm -d --name mcp-test ${{ env.IMAGE_NAME }}:test
          sleep 5
          docker logs mcp-test
          docker stop mcp-test

      - name: 🔒 Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: 📊 Upload Docker security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # 📦 Package & Release
  release:
    name: 📦 Package & Release
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 20
    needs: [tests, mcp-protocol-tests, e2e-mcp-tests, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build MCP server
        run: npm run build

      - name: 📦 Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: 🚢 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Generate MCP documentation
        run: |
          if [ -f "scripts/generate-docs.js" ]; then
            node scripts/generate-docs.js
          fi

      - name: 📄 Update release notes
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            docs/mcp-spec.json
          body: |
            ## 🔌 MCP Server Release
            
            This release includes:
            - Updated MCP server with latest protocol support
            - Docker images for multiple architectures
            - NPM package for easy installation
            
            ### Installation
            ```bash
            npm install ${{ github.repository }}
            ```
            
            ### Docker
            ```bash
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ```

  # 🔄 Dependency Updates
  dependency-update:
    name: 🔄 Dependency Updates
    runs-on: [self-hosted, linux, docker]
    timeout-minutes: 10
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Update dependencies
        run: |
          npm update
          npm audit fix

      - name: 🔌 Check MCP protocol compatibility
        run: |
          npm run build
          npm run test:protocol

      - name: 📝 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: '🔄 chore: update MCP server dependencies'
          title: '🔄 Automated MCP dependency updates'
          body: |
            ## 🔄 Automated MCP Server Dependency Updates
            
            This PR contains automated dependency updates for the MCP server.
            
            - Updated npm packages to latest compatible versions
            - Fixed security vulnerabilities with `npm audit fix`
            - Verified MCP protocol compatibility
            
            **Note**: Please review changes and test MCP functionality before merging.
          branch: chore/mcp-dependency-updates
          delete-branch: true

# 📊 Workflow Status Badge
# Add to README.md:
# [![MCP Server Pipeline](https://github.com/YOUR_USERNAME/YOUR_REPO/workflows/🔌%20MCP%20Server%20Pipeline/badge.svg)](https://github.com/YOUR_USERNAME/YOUR_REPO/actions)